---
- name: check eaas components to update
  when: eaas_update_components != ''
  vars:
    eaas_components:
    - "{{ eaas_component_ui }}"
    - "{{ eaas_component_ear }}"
    - "{{ eaas_component_docker_image }}"
    - "{{ eaas_component_server_data }}"
  assert:
    that: eaas_update_components is subset(eaas_components)
    success_msg: "Components to update: {{ eaas_update_components }}"
    fail_msg: "Invalid components to update: {{ eaas_update_components }}"

- name: create eaas home folder
  become: yes
  file:
    path: "{{ host_eaas_home }}"
    state: directory
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"

- name: create eaas runtime folders
  file:
    path: "{{ host_eaas_home }}/{{ item }}"
    state: directory
  loop:
  - config
  - certificates
  - deployments
  - eaas-ui
  - image-archive
  - server-data
  - log
  - welcome-content
  - keycloak
  - data
  - hooks
  - resolver/cache

- name: create eaas tmpStorage folder
  become: yes
  file:
    path: "{{ host_tmp_storage }}"
    state: directory
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    mode: "a+rwx,+t"

- name: create secrets folder
  file:
    path: "{{ eaas_secrets_dir }}"
    state: directory

- name: prepare eaas secrets
  include_tasks: utils/secret.yaml
  vars:
    filepath: "{{ eaas_secrets_dir }}/{{ item.key }}"
    varname: "{{ item.var }}"
  loop:
  - key: "eaas-api"
    var: eaas_api_secret

- name: generate random internal-api secret
  when: eaas_internal_api_secret is undefined
  set_fact:
    eaas_internal_api_secret: "{{ lookup('password', '/dev/null length=32 chars=ascii_uppercase,digits') }}"

- name: generate random deployment-api access-token
  when: eaas_deployment_api_access_token is undefined
  set_fact:
    eaas_deployment_api_access_token: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"

- name: "copy hook-runner script"
  template:
    src: hooks/runner.sh
    dest: "{{ eaas_hooks_runner }}"
    mode: u=rwx,g=rx,o=

- name: define eaas gateway's hostname
  when: eaas_deployment_mode != 'emucomp'
  set_fact:
    eaas_gw_hostname: "{{ eaas_hostname }}"

- name: read current docker-compose file
  shell: "cat '{{ host_eaas_home }}/docker-compose.yaml' || echo ''"
  register: result

- name: parse current docker-compose file
  set_fact:
    docker_compose_file_content: "{{ result.stdout | from_yaml }}"

- name: prepare keycloak
  when: keycloak_enabled
  include_tasks: keycloak/main.yaml

- name: prepare minio
  when: minio_enabled
  include_tasks: minio/main.yaml

- name: upload custom files
  when: eaas_deployment_mode != 'emucomp'
  loop: "{{ eaas_custom_files }}"
  include_tasks: custom-files.yaml
  vars:
    source_path: "{{ item.source }}"
    target_path: "{{ item.target }}"

- name: prepare operator
  when: operator_enabled
  include_tasks: operator/prepare.yaml

- name: download pre-built eaas-server
  when: not operator_enabled
  become: yes
  get_url:
    force: "{{ eaas_component_ear in eaas_update_components }}"
    url: "{{ eaas_server_ear_url }}"
    dest: "{{ host_eaas_home }}/deployments/eaas-server.ear"
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    headers:
      PRIVATE-TOKEN: "{{ eaas_private_token  | default(omit) }}"

- name: check if db exists
  register: db_dir_check
  stat:
    path: "{{ host_eaas_home }}/server-data/db"

- name: upgrade image-archive's db
  when: db_dir_check.stat.exists and eaas_db_upgrade | bool
  include_tasks: db-upgrade.yaml
  vars:
    db_dir: "{{ host_eaas_home }}/server-data/db"
    db_backup_dir: "{{ db_dir }}-backup"
    db_version_file: "{{ db_dir }}-version.txt"

- name: prepare customized docker image
  import_tasks: docker/customize.yaml

- name: create directory for eaas-config parts
  file:
    path: "{{ host_eaas_config_parts_dir }}"
    state: directory

- name: prepare main eaas-config
  when: eaas_deployment_mode != 'emucomp'
  template:
    src: eaas-config.yaml.j2
    dest: "{{ host_eaas_config_parts_dir }}/01-main.yaml"

- name: create directory for nghttpx
  file:
    path: "{{ host_eaas_config_nghttpx_dir }}"
    state: directory

- name: prepare nghttpx-config
  template:
    src: proxy/nghttpx.conf.j2
    dest: "{{ host_eaas_config_nghttpx_dir }}/nghttpx.conf"

- name: generate random cluster-manager access-token
  when: eaas_cluster_api_access_token == ''
  set_fact:
    eaas_cluster_api_access_token: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"

- name: prepare cluster-manager config
  when: eaas_deployment_mode != 'emucomp'
  vars:
    clustermgr: "{{ eaas_clustermgr }}"
  template:
    src: "{{ eaas_clustermgr_config_template }}"
    dest: "{{ host_eaas_config_parts_dir }}/02-clustermgr.yaml"

- name: create directory for nginx configs
  file:
    path: "{{ host_eaas_config_nginx_dir }}"
    state: directory

- name: prepare main nginx-config
  template:
    src: nginx/nginx.conf
    dest: "{{ host_eaas_config_nginx_dir }}/nginx.conf"

- name: prepare resolver-config
  template:
    src: nginx/resolver.conf.j2
    dest: "{{ host_eaas_config_nginx_dir }}/resolver.conf"

- name: create directory for object-archive configs
  file:
    path: "{{ host_eaas_config_objectarchive_dir }}"
    state: directory

- name: prepare custom object-archive config
  when: eaas_deployment_mode != 'emucomp'
  loop: "{{ eaas_objectarchive_backends }}"
  loop_control:
    loop_var: config
  template:
    src: "object-archives/{{ config.type | lower }}.json.j2"
    dest: "{{ host_eaas_config_objectarchive_dir }}/{{ config.name | lower | replace(' ', '-') }}.json"

- name: prepare admin-ui
  when: ui_enable_admin_ui and eaas_deployment_mode != 'emucomp'
  include_tasks: ui/admin-ui.yaml

- name: copy list of default operating-systems
  when: eaas_deployment_mode != 'emucomp'
  template:
    src: "operating-systems.json"
    dest: "{{ host_eaas_home }}/server-data/operating-systems.json"

- name: setup autorun-scripts
  when: eaas_autorun_scripts_enabled
  include_tasks: server-data/autorun-scripts.yaml

- name: setup generalization-patches
  when: eaas_generalization_patches_enabled
  include_tasks: server-data/generalization-patches.yaml

- name: copy snapshot-related pre-start hook
  when: eaas_enable_snapshots
  include_tasks: utils/hook.yaml
  vars:
    kind: "pre-start"
    name: "01-enable-ip6tables.sh"

- name: import keycloak's external state
  import_tasks: keycloak/realm-import.yaml

- name: create systemd unit
  when: "unsupported_os is undefined"
  become: yes
  template:
    src: eaas.service.j2
    dest: "/etc/systemd/system/{{ host_eaas_service_name}}.service"

- name: reload systemd deamons
  when: "unsupported_os is undefined"
  become: yes
  systemd:
    daemon_reload: yes

- name: enable eaas.service
  when: "unsupported_os is undefined"
  become: yes
  service:
    name: "{{host_eaas_service_name}}.service"
    state: "{{ 'started' if operator_enabled else omit }}"
    enabled: yes

- name: bootstrap initial release
  when: operator_enabled
  include_tasks: operator/bootstrap.yaml
