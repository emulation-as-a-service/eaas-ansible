#!/usr/bin/env sh

set -eu

kcadm='docker exec -i keycloak /opt/jboss/keycloak/bin/kcadm.sh'
client_id='a8f1df16-de41-4dac-8cc7-35abbee912c6'

__connect_and_login() {
	docker ps | grep --quiet keycloak || return 1
	${kcadm} config credentials \
		--server http://keycloak:8080/auth \
		--user "{{ keycloak_admin_user }}"\
		--password "{{ keycloak_admin_password }}" \
		--realm master
}

retries=120
while ! __connect_and_login; do
	retries=$((${retries} - 1))
	test "${retries}" -gt 0 || exit 1
	sleep 1s
done

echo "Updating realm's properties..."
${kcadm} update realms/master --merge -s 'enabled=true' \
	-h 'content-type=application/json' -f - << "EOF"
{
	"accessTokenLifespan": 3600
}
EOF

# NOTE: client's protocol-mappers are currently referenced by names internally,
#       although IDs have to be used for API reguests. Hence, renaming of existing
#       mappers via an update operation will fail, resulting in two entries with
#       same ID but different names! As a workaround, delete a renamed mapper by
#       it's ID first and re-add it via client's update later.

echo "Deleting renamed procol-mappers..."
for mapper_id in f3a3cd02-9cf7-48e4-af26-13d45b6112c1; do
	${kcadm} delete clients/${client_id}/protocol-mappers/models/${mapper_id} || true
done

echo "Updating client's properties..."
${kcadm} update clients/${client_id} --merge -s 'enabled=true' \
	-h 'content-type=application/json' -f - << "EOF"
{
	"standardFlowEnabled": true,
	"rootUrl": "{{ eaas_base_url }}",
	"adminUrl": "{{ keycloak_frontend_url }}",
	"redirectUris": [
{% if eaas_devmode_enabled %}
		"http://localhost:8080/*",
		"http://localhost:8084/*",
{% endif %}
		"{{ eaas_base_url }}/*"
	],
	"webOrigins": [
{% if eaas_devmode_enabled %}
		"http://localhost:8080",
		"http://localhost:8084",
{% endif %}
		"{{ eaas_base_url }}"
	],
	"protocolMappers": [
		{
			"id": "f3a3cd02-9cf7-48e4-af26-13d45b6112c1",
			"name": "eaas-roles",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-client-role-mapper",
			"consentRequired": false,
			"config": {
				"multivalued": "true",
				"userinfo.token.claim": "true",
				"id.token.claim": "true",
				"access.token.claim": "true",
				"claim.name": "roles",
				"jsonType.label": "String",
				"usermodel.clientRoleMapping.clientId": "eaas"
			}
		},
		{
			"id": "9f446f31-2f55-492d-a5de-5f5059107dd8",
			"name": "tenant-id",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-attribute-mapper",
			"consentRequired": false,
			"config": {
				"userinfo.token.claim": "true",
				"user.attribute": "tid",
				"id.token.claim": "true",
				"access.token.claim": "true",
				"claim.name": "tid",
				"jsonType.label": "String"
			}
		},
		{
			"id": "23340706-7bc9-4a96-a3d2-1a41e1b9ea23",
			"name": "org-name",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-attribute-mapper",
			"consentRequired": false,
			"config": {
				"userinfo.token.claim": "true",
				"user.attribute": "orgname",
				"id.token.claim": "false",
				"access.token.claim": "false",
				"claim.name": "orgname",
				"jsonType.label": "String"
			}
		}
	]
}
EOF

echo "Updating client's default scopes..."
set -- 67b6d2c4-fec5-4ada-ba5e-fc780ea46cf4

for scope in "$@"; do
	${kcadm} delete clients/${client_id}/default-client-scopes/${scope} || true
done

echo "Updating client's optional scopes..."
set -- 5ac10aaa-07d1-4fbd-a43b-09a4d2af77f2 \
       85a9e2b3-ef41-411e-a350-6ea3060f89b1 \
       02cb4c41-b2b1-4cdf-b866-67c342ee4fa0 \
       b3c97bfa-7cd8-40e2-babd-c5c873f3c06d

for scope in "$@"; do
	${kcadm} delete clients/${client_id}/optional-client-scopes/${scope} || true
done

echo "Keycloak's config updated"
