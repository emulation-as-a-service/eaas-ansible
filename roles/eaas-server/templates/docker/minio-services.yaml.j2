  minio:
    image: minio/minio
    container_name: minio
    labels:
      caddy: "https://{{ eaas_hostname }}"
      caddy.@minio.path: /user-data/
      caddy.reverse_proxy: "@minio {%raw%}{{upstreams 9000}}{%endraw%}"
{% if docker_network_name != '' %}
    networks:
    - {{ docker_network_name }}
{% endif %}
    volumes:
    - {{ minio_data_path }}/data:/data
    environment:
      MINIO_ACCESS_KEY: {{ minio_key }}
      MINIO_SECRET_KEY: {{ minio_secret }}
    command: server /data
{% for storage in eaas_imagearchive_storage if storage.provider != 'minio' %}
{% set name = 'minio-gw-' + loop.index | string %}

  {{ name }}:
    image: registry.gitlab.com/emulation-as-a-service/minio-eaas
    container_name: {{ name }}
{% if docker_network_name != '' %}
    networks:
    - {{ docker_network_name }}
{% endif %}
    volumes:
    - {{ minio_data_path }}/cache-{{ loop.index }}:/data
{% if storage.provider == 'google-cloud-storage' %}
    - {{ minio_secrets_dir }}/{{ storage.credentials.file | basename }}:/credentials.json
{% endif %}
    environment:
      MINIO_ACCESS_KEY: {{ storage.credentials.access_key | default(minio_key) }}
      MINIO_SECRET_KEY: {{ storage.credentials.secret_key | default(minio_secret) }}
{% if storage.provider == 'google-cloud-storage' %}
      GOOGLE_APPLICATION_CREDENTIALS: /credentials.json
{% endif %}
{% if storage.provider == 's3'%}
      MINIO_ROOT_USER: {{ storage.credentials.s3_root_user }}
      MINIO_ROOT_PASSWORD: {{ storage.credentials.s3_root_password }}
{% endif %}
      MINIO_CACHE: "on"
{% if storage.disable_range_cache is defined and storage.disable_range_cache | bool %}
      MINIO_CACHE_RANGE: "off"
{% endif %}
      MINIO_CACHE_DRIVES: /data
      MINIO_CACHE_QUOTA: 80
      MINIO_CACHE_AFTER: 1
      MINIO_CACHE_WATERMARK_LOW: 70
      MINIO_CACHE_WATERMARK_HIGH: 90    
{% if storage.provider == 'google-cloud-storage' %}
    command: gateway gcs {{ lookup('file', storage.credentials.file) | from_json | json_query('project_id') }}
{% elif storage.provider == 's3' %}
    command: gateway s3 {{ storage.endpoint }}
{% else %}
	{{ unsupported_storage_provider | mandatory('Unsupported storage provider: ' + storage.provider) }}
{% endif %}
{% endfor %}
